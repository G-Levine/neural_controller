neural_controller:
  repeat_action:
    {
      type: int,
      default_value: 8,
      description: "Number of times to repeat the same action before querying the policy again",
    }

  model_path:
    {
      type: string,
      default_value: "",
      description: "Path to the model weights",
    }

  use_imu:
    {
      type: bool,
      default_value: true,
      description: "Whether to use the IMU sensor",
    }

  imu_sensor_name:
    {
      type: string,
      default_value: "imu_sensor",
      description: "Name of the IMU sensor",
    }

  joint_names:
    {
      type: string_array,
      default_value: [],
      description: "Names of the joints to control, in the order expected by the policy observation/action spaces",
    }

  default_joint_pos:
    {
      type: double_array,
      default_value: [],
      description: "Default joint positions to use when the controller is reset",
    }

  kps:
    {
      type: double_array,
      default_value: [],
      description: "Position gains for the joints",
    }

  kds:
    {
      type: double_array,
      default_value: [],
      description: "Velocity gains for the joints",
    }

  init_kps:
    {
      type: double_array,
      default_value: [],
      description: "Position gains for the joints during initialization (return to default position)",
    }

  init_kds:
    {
      type: double_array,
      default_value: [],
      description: "Velocity gains for the joints during initialization (return to default position)",
    }

  init_duration:
    {
      type: double,
      default_value: 2.0,
      description: "Time to return to the default position on startup",
    }

  fade_in_duration:
    {
      type: double,
      default_value: 2.0,
      description: "Time to gradually fade in the policy actions on startup",
    }

  action_scales:
    {
      type: double_array,
      default_value: [],
      description: "Scaling factor for the actions",
    }

  action_types:
    {
      type: string_array,
      default_value: [],
      description: "Type of action for each joint: position or velocity",
    }

  joint_lower_limits:
    {
      type: double_array,
      default_value: [],
      description: "Lower limits for the joint positions",
    }

  joint_upper_limits:
    {
      type: double_array,
      default_value: [],
      description: "Upper limits for the joint positions",
    }

  observation_history:
    {
      type: int,
      default_value: 1,
      description: "Number of previous observations to include in the observation space",
    }

  observation_limit:
    {
      type: double,
      default_value: 100.0,
      description: "Maximum observation value before scaling",
    }

  max_body_angle:
    {
      type: double,
      default_value: 0.52,
      description: "Maximum body angle (rad) allowed before the controller is reset",
    }

  max_pitch_deg:
    {
      type: double,
      default_value: 30.0,
      description: "Maximum pitch angle (deg) allowed before the controller is reset",
    }

  max_roll_deg:
    {
      type: double,
      default_value: 30.0,
      description: "Maximum roll angle (deg) allowed before the controller is reset",
    }

  # TODO make a new joystick node
  estop_button_indices:
    {
      type: int_array,
      default_value: [11, 12],
      description: "Index of the emergency stop button in joy message. [11, 12] for PS4 and [9, 10] for PS5",
    }

  estop_release_button_idx:
    {
      type: int,
      default_value: 9,
      description: "Index of the emergency stop release button in joy message. 9 for PS4 and 7 for PS5",
    }

  pitch_axis_idx:
    {
      type: int,
      default_value: 4,
      description: "Index of the pitch axis in joy message",
    }
  roll_axis_idx:
    {
      type: int,
      default_value: 6,
      description: "Index of the roll axis in joy message",
    }
